Parameters:
  EnvironmentName:
    Description: The name of the deployment application
    Type: String
    Default: My-Deployment-Application

  VPCCIDR:
    Description: CIDR Block of the VPC
    Type: String
    Default: 10.0.0.0/16

  PrivateSubnet1CIDR:
    Description: CIDR Block of the first private subnet
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet1CIDR:
    Description: CIDR Block of the first public subnet
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet2CIDR:
    Description: CIDR Block of the second private subnet
    Type: String
    Default: 10.0.2.0/24

  PublicSubnet2CIDR:
    Description: CIDR Block of the second public subnet
    Type: String
    Default: 10.0.3.0/24

  BucketName:
    Description: The bucket containing static website files
    Type: String
    Default: demo-web-app2-using-cloudformation

  AmiID:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id"

  MinCapacity:
    Type: String
    Default: "2"

  MaxCapacity:
    Type: String
    Default: "4"

  DesiredCapacity:
    Type: String
    Default: "2"

  CPUPolicyTargetValue:
    Type: Number
    Default: 30

  JumpboxKeyName:
    Type: String
    Default: proj2-jumpbox-key

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""]

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # VPC Gateway Attachment
  InternetGatewayVPCAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Elastic IPs and NAT Gateways
  EIP1:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayVPCAttachment

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt EIP1.AllocationId

  EIP2:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayVPCAttachment

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      AllocationId: !GetAtt EIP2.AllocationId

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes 1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes 2

  # Routes
  # 1. Public routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayVPCAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # 2. Private routes
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Web Server Security Group
  JumpboxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    VpcId:
      Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
    GroupDescription: Allow SSH from anywhere
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
    SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    VpcId:
      Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
    GroupDescription: Allow HTTP from anywhere, and HTTP to the Web Servers
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
    SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    VpcId:
      Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
    GroupDescription: Allow SSH from JumpBox and HTTP from the ALB
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref ALBSecurityGroup
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref JumpboxSecurityGroup
    SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref ALBSecurityGroup
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref JumpboxSecurityGroup

  # A Role to access the bucket
  EC2S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3AccessPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${BucketName}/*"
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Sub "arn:aws:s3:::${BucketName}"
      Roles:
        - !Ref EC2S3AccessRole

  # The instance profile
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2S3AccessRole

  # Auto Scaling Launch Configuration
  WebServerASGLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AmiID
      InstanceType: t3.small
      InstanceMonitoring: true
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 10
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y
          apt install apache2 awscli -y

          systemctl start apache2.service
          systemctl enable apache2.service

          aws s3 sync s3://${BucketName} /var/www/html

  # The auto-scaling group (ASG)
  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    Properties:
      LaunchConfigurationName: !Ref WebServerASGLaunchConfiguration
      MaxSize: !Ref MaxCapacity
      MinSize: !Ref MinCapacity
      DesiredCapacity: !Ref DesiredCapacity

      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-Private-Subnet-1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-Private-Subnet-2"

      TargetGroupARNs:
        - !Ref ELBTargetGroup # To be created later

  # The auto-scaling policy
  WebServerASGCPUScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUPolicyTargetValue

  # Elastic Load Balancing
  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
      Port: 80
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  # The Application Load Balancer (ALB)
  ELBLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${EnvironmentName}-ALB"
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-Public-Subnet-1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-Public-Subnet-2"
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # The Listener
  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup
      LoadBalancerArn: !Ref ELBLoadBalancer
      Port: 80
      Protocol: HTTP

  # The listener rule
  ELBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      ListenerArn: !Ref ELBListener
      Priority: 1

  # The Jumpbox Servers
  Jumpbox1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref AmiID
      KeyName: !Ref JumpboxKeyName
      SecurityGroupIds:
        - !Ref JumpboxSecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub "${EnvironmentName}-Public-Subnet-1"
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Jumpbox-1"

  Jumpbox2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref AmiID
      KeyName: !Ref JumpboxKeyName
      SecurityGroupIds:
        - !Ref JumpboxSecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub "${EnvironmentName}-Public-Subnet-2"
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Jumpbox-2"

  # Outputs
  Outputs:
    VPC:
      Description: VPC ID
      Value: !Ref VPC
      Export:
        Name: !Sub "${EnvironmentName}-VPC"

    PublicSubnet1:
      Description: Public Subnet 1 ID
      Value: !Ref PublicSubnet1
      Export:
        Name: !Sub "${EnvironmentName}-Public-Subnet-1"

    PublicSubnet2:
      Description: Public Subnet 2 ID
      Value: !Ref PublicSubnet2
      Export:
        Name: !Sub "${EnvironmentName}-Public-Subnet-2"

    PrivateSubnet1:
      Description: Private Subnet 1 ID
      Value: !Ref PrivateSubnet1
      Export:
        Name: !Sub "${EnvironmentName}-Private-Subnet-1"

    PrivateSubnet2:
      Description: Private Subnet 2 ID
      Value: !Ref PrivateSubnet2
      Export:
        Name: !Sub "${EnvironmentName}-Private-Subnet-2"

    LoadBalancerDNSName:
      Description: DNS Name of the web application
      Value: !Join
        - ""
        - - "http://"
          - !GetAtt ELBLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-ELB-DNS-Name
